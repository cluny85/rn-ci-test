{"version":3,"sources":["generate.ts"],"names":["logoFileName","xcassetName","androidColorName","androidColorRegex","ContentsJson","getStoryboard","height","width","backgroundColor","hex","r","parseInt","toPrecision","g","b","bootSplashXml","log","text","dim","console","chalk","isValidHexadecimal","value","test","toFullHexadecimal","prefixed","up","toUpperCase","length","generate","android","ios","workingDirectory","logoPath","logoWidth","assetsPath","Error","image","jimp","read","backgroundColorHex","images","getHeight","size","Math","ceil","bitmap","fs","existsSync","push","filePath","path","resolve","appPath","appName","sourceDir","resPath","drawablePath","valuesPath","ensureDirSync","bootSplashXmlPath","writeFileSync","relative","colorsXmlPath","colorsXmlEntry","colorsXml","readFileSync","match","replace","projectPath","imagesPath","storyboardPath","imageSetPath","Promise","all","map","clone","cover","writeAsync","then","underline"],"mappings":"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","sourcesContent":["import chalk from \"chalk\";\nimport fs from \"fs-extra\";\nimport jimp from \"jimp\";\nimport path from \"path\";\n\nconst logoFileName = \"bootsplash_logo\";\nconst xcassetName = \"BootSplashLogo\";\nconst androidColorName = \"bootsplash_background\";\nconst androidColorRegex = /<color name=\"bootsplash_background\">#\\w+<\\/color>/g;\n\nconst ContentsJson = `{\n  \"images\": [\n    {\n      \"idiom\": \"universal\",\n      \"filename\": \"${logoFileName}.png\",\n      \"scale\": \"1x\"\n    },\n    {\n      \"idiom\": \"universal\",\n      \"filename\": \"${logoFileName}@2x.png\",\n      \"scale\": \"2x\"\n    },\n    {\n      \"idiom\": \"universal\",\n      \"filename\": \"${logoFileName}@3x.png\",\n      \"scale\": \"3x\"\n    }\n  ],\n  \"info\": {\n    \"version\": 1,\n    \"author\": \"xcode\"\n  }\n}\n`;\n\nconst getStoryboard = ({\n  height,\n  width,\n  backgroundColor: hex,\n}: {\n  height: number;\n  width: number;\n  backgroundColor: string;\n}) => {\n  const r = (parseInt(hex[1] + hex[2], 16) / 255).toPrecision(15);\n  const g = (parseInt(hex[3] + hex[4], 16) / 255).toPrecision(15);\n  const b = (parseInt(hex[5] + hex[6], 16) / 255).toPrecision(15);\n\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<document type=\"com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB\" version=\"3.0\" toolsVersion=\"17147\" targetRuntime=\"iOS.CocoaTouch\" propertyAccessControl=\"none\" useAutolayout=\"YES\" launchScreen=\"YES\" useTraitCollections=\"YES\" useSafeAreas=\"YES\" colorMatched=\"YES\" initialViewController=\"01J-lp-oVM\">\n    <device id=\"retina4_7\" orientation=\"portrait\" appearance=\"light\"/>\n    <dependencies>\n        <deployment identifier=\"iOS\"/>\n        <plugIn identifier=\"com.apple.InterfaceBuilder.IBCocoaTouchPlugin\" version=\"17120\"/>\n        <capability name=\"Safe area layout guides\" minToolsVersion=\"9.0\"/>\n        <capability name=\"documents saved in the Xcode 8 format\" minToolsVersion=\"8.0\"/>\n    </dependencies>\n    <scenes>\n        <!--View Controller-->\n        <scene sceneID=\"EHf-IW-A2E\">\n            <objects>\n                <viewController id=\"01J-lp-oVM\" sceneMemberID=\"viewController\">\n                    <view key=\"view\" autoresizesSubviews=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"scaleToFill\" id=\"Ze5-6b-2t3\">\n                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"375\" height=\"667\"/>\n                        <autoresizingMask key=\"autoresizingMask\"/>\n                        <subviews>\n                            <imageView autoresizesSubviews=\"NO\" clipsSubviews=\"YES\" userInteractionEnabled=\"NO\" contentMode=\"scaleAspectFit\" image=\"BootSplashLogo\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"3lX-Ut-9ad\">\n                                <rect key=\"frame\" x=\"${(375 - width) / 2}\" y=\"${\n    (667 - height) / 2\n  }\" width=\"${width}\" height=\"${height}\"/>\n                                <accessibility key=\"accessibilityConfiguration\">\n                                    <accessibilityTraits key=\"traits\" image=\"YES\" notEnabled=\"YES\"/>\n                                </accessibility>\n                            </imageView>\n                        </subviews>\n                        <viewLayoutGuide key=\"safeArea\" id=\"Bcu-3y-fUS\"/>\n                        <color key=\"backgroundColor\" red=\"${r}\" green=\"${g}\" blue=\"${b}\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n                        <accessibility key=\"accessibilityConfiguration\">\n                            <accessibilityTraits key=\"traits\" notEnabled=\"YES\"/>\n                        </accessibility>\n                        <constraints>\n                            <constraint firstItem=\"3lX-Ut-9ad\" firstAttribute=\"centerX\" secondItem=\"Ze5-6b-2t3\" secondAttribute=\"centerX\" id=\"Fh9-Fy-1nT\"/>\n                            <constraint firstItem=\"3lX-Ut-9ad\" firstAttribute=\"centerY\" secondItem=\"Ze5-6b-2t3\" secondAttribute=\"centerY\" id=\"nvB-Ic-PnI\"/>\n                        </constraints>\n                    </view>\n                </viewController>\n                <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"iYj-Kq-Ea1\" userLabel=\"First Responder\" sceneMemberID=\"firstResponder\"/>\n            </objects>\n            <point key=\"canvasLocation\" x=\"0.0\" y=\"0.0\"/>\n        </scene>\n    </scenes>\n    <resources>\n        <image name=\"${xcassetName}\" width=\"${width}\" height=\"${height}\"/>\n    </resources>\n</document>\n`;\n};\n\nconst bootSplashXml = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\" android:opacity=\"opaque\">\n    <item android:drawable=\"@color/${androidColorName}\" />\n\n    <item>\n        <bitmap android:src=\"@mipmap/${logoFileName}\" android:gravity=\"center\" />\n    </item>\n</layer-list>\n`;\n\nconst log = (text: string, dim = false) => {\n  console.log(dim ? chalk.dim(text) : text);\n};\n\nconst isValidHexadecimal = (value: string) =>\n  /^#?([0-9A-F]{3}){1,2}$/i.test(value);\n\nconst toFullHexadecimal = (hex: string) => {\n  const prefixed = hex[0] === \"#\" ? hex : `#${hex}`;\n  const up = prefixed.toUpperCase();\n\n  return up.length === 4\n    ? \"#\" + up[1] + up[1] + up[2] + up[2] + up[3] + up[3]\n    : up;\n};\n\nexport const generate = async ({\n  android,\n  ios,\n\n  workingDirectory,\n  logoPath,\n  backgroundColor,\n  logoWidth,\n  assetsPath,\n}: {\n  android: {\n    sourceDir: string;\n    appName: string;\n  } | null;\n  ios: {\n    projectPath: string;\n  } | null;\n\n  workingDirectory: string;\n  logoPath: string;\n  backgroundColor: string;\n  logoWidth: number;\n  assetsPath?: string;\n}) => {\n  if (!isValidHexadecimal(backgroundColor)) {\n    throw new Error(\n      \"--background-color value is not a valid hexadecimal color.\",\n    );\n  }\n\n  const image = await jimp.read(logoPath);\n  const backgroundColorHex = toFullHexadecimal(backgroundColor);\n\n  const images: {\n    filePath: string;\n    width: number;\n    height: number;\n  }[] = [];\n\n  const getHeight = (size: number) =>\n    Math.ceil(size * (image.bitmap.height / image.bitmap.width));\n\n  const width = {\n    \"@1x\": logoWidth,\n    \"@1,5x\": logoWidth * 1.5,\n    \"@2x\": logoWidth * 2,\n    \"@3x\": logoWidth * 3,\n    \"@4x\": logoWidth * 4,\n  };\n\n  const height = {\n    \"@1x\": getHeight(width[\"@1x\"]),\n    \"@1,5x\": getHeight(width[\"@1,5x\"]),\n    \"@2x\": getHeight(width[\"@2x\"]),\n    \"@3x\": getHeight(width[\"@3x\"]),\n    \"@4x\": getHeight(width[\"@4x\"]),\n  };\n\n  if (assetsPath && fs.existsSync(assetsPath)) {\n    images.push(\n      {\n        filePath: path.resolve(assetsPath, logoFileName + \".png\"),\n        width: width[\"@1x\"],\n        height: height[\"@1x\"],\n      },\n      {\n        filePath: path.resolve(assetsPath, logoFileName + \"@1,5x.png\"),\n        width: width[\"@1,5x\"],\n        height: height[\"@1,5x\"],\n      },\n      {\n        filePath: path.resolve(assetsPath, logoFileName + \"@2x.png\"),\n        width: width[\"@2x\"],\n        height: height[\"@2x\"],\n      },\n      {\n        filePath: path.resolve(assetsPath, logoFileName + \"@3x.png\"),\n        width: width[\"@3x\"],\n        height: height[\"@3x\"],\n      },\n      {\n        filePath: path.resolve(assetsPath, logoFileName + \"@4x.png\"),\n        width: width[\"@4x\"],\n        height: height[\"@4x\"],\n      },\n    );\n  }\n\n  if (android) {\n    const appPath = android.appName\n      ? path.resolve(android.sourceDir, android.appName)\n      : path.resolve(android.sourceDir); // @react-native-community/cli 2.x & 3.x support\n\n    const resPath = path.resolve(appPath, \"src\", \"main\", \"res\");\n    const drawablePath = path.resolve(resPath, \"drawable\");\n    const valuesPath = path.resolve(resPath, \"values\");\n\n    fs.ensureDirSync(drawablePath);\n    fs.ensureDirSync(valuesPath);\n\n    const bootSplashXmlPath = path.resolve(drawablePath, \"bootsplash.xml\");\n    fs.writeFileSync(bootSplashXmlPath, bootSplashXml, \"utf-8\");\n    log(`✨  ${path.relative(workingDirectory, bootSplashXmlPath)}`, true);\n\n    const colorsXmlPath = path.resolve(valuesPath, \"colors.xml\");\n    const colorsXmlEntry = `<color name=\"${androidColorName}\">${backgroundColorHex}</color>`;\n\n    if (fs.existsSync(colorsXmlPath)) {\n      const colorsXml = fs.readFileSync(colorsXmlPath, \"utf-8\");\n\n      if (colorsXml.match(androidColorRegex)) {\n        fs.writeFileSync(\n          colorsXmlPath,\n          colorsXml.replace(androidColorRegex, colorsXmlEntry),\n          \"utf-8\",\n        );\n      } else {\n        fs.writeFileSync(\n          colorsXmlPath,\n          colorsXml.replace(\n            /<\\/resources>/g,\n            `    ${colorsXmlEntry}\\n</resources>`,\n          ),\n          \"utf-8\",\n        );\n      }\n\n      log(`✏️   ${path.relative(workingDirectory, colorsXmlPath)}`, true);\n    } else {\n      fs.writeFileSync(\n        colorsXmlPath,\n        `<resources>\\n    ${colorsXmlEntry}\\n</resources>\\n`,\n        \"utf-8\",\n      );\n\n      log(`✨  ${path.relative(workingDirectory, colorsXmlPath)}`, true);\n    }\n\n    images.push(\n      {\n        filePath: path.resolve(resPath, \"mipmap-mdpi\", logoFileName + \".png\"),\n        width: width[\"@1x\"],\n        height: height[\"@1x\"],\n      },\n      {\n        filePath: path.resolve(resPath, \"mipmap-hdpi\", logoFileName + \".png\"),\n        width: width[\"@1,5x\"],\n        height: height[\"@1,5x\"],\n      },\n      {\n        filePath: path.resolve(resPath, \"mipmap-xhdpi\", logoFileName + \".png\"),\n        width: width[\"@2x\"],\n        height: height[\"@2x\"],\n      },\n      {\n        filePath: path.resolve(resPath, \"mipmap-xxhdpi\", logoFileName + \".png\"),\n        width: width[\"@3x\"],\n        height: height[\"@3x\"],\n      },\n      {\n        filePath: path.resolve(\n          resPath,\n          \"mipmap-xxxhdpi\",\n          logoFileName + \".png\",\n        ),\n        width: width[\"@4x\"],\n        height: height[\"@4x\"],\n      },\n    );\n  }\n\n  if (ios) {\n    const projectPath = ios.projectPath.replace(/.xcodeproj$/, \"\");\n    const imagesPath = path.resolve(projectPath, \"Images.xcassets\");\n\n    if (fs.existsSync(projectPath)) {\n      const storyboardPath = path.resolve(projectPath, \"BootSplash.storyboard\");\n\n      fs.writeFileSync(\n        storyboardPath,\n        getStoryboard({\n          height: height[\"@1x\"],\n          width: width[\"@1x\"],\n          backgroundColor: backgroundColorHex,\n        }),\n        \"utf-8\",\n      );\n\n      log(`✨  ${path.relative(workingDirectory, storyboardPath)}`, true);\n    } else {\n      log(\n        `No \"${projectPath}\" directory found. Skipping iOS storyboard generation…`,\n      );\n    }\n\n    if (fs.existsSync(imagesPath)) {\n      const imageSetPath = path.resolve(imagesPath, xcassetName + \".imageset\");\n      fs.ensureDirSync(imageSetPath);\n\n      fs.writeFileSync(\n        path.resolve(imageSetPath, \"Contents.json\"),\n        ContentsJson,\n        \"utf-8\",\n      );\n\n      images.push(\n        {\n          filePath: path.resolve(imageSetPath, logoFileName + \".png\"),\n          width: width[\"@1x\"],\n          height: height[\"@1x\"],\n        },\n        {\n          filePath: path.resolve(imageSetPath, logoFileName + \"@2x.png\"),\n          width: width[\"@2x\"],\n          height: height[\"@2x\"],\n        },\n        {\n          filePath: path.resolve(imageSetPath, logoFileName + \"@3x.png\"),\n          width: width[\"@3x\"],\n          height: height[\"@3x\"],\n        },\n      );\n    } else {\n      log(\n        `No \"${imagesPath}\" directory found. Skipping iOS images generation…`,\n      );\n    }\n  }\n\n  await Promise.all(\n    images.map(({ filePath, width, height }) =>\n      image\n        .clone()\n        .cover(width, height)\n        .writeAsync(filePath)\n        .then(() => {\n          log(\n            `✨  ${path.relative(\n              workingDirectory,\n              filePath,\n            )} (${width}x${height})`,\n            true,\n          );\n        }),\n    ),\n  );\n\n  log(\n    `✅  Done! Thanks for using ${chalk.underline(\"react-native-bootsplash\")}.`,\n  );\n};\n"]}